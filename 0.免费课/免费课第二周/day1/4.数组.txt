// 1) 方法的作用
// 2) 是否需要传参
// 3) 方法的返回值
// 4) 原有数组是否发生改变；

// 1. pop
    1) 删除数组的最后一项
    2) 不需要传参
    3) 是删除的那一项
    4) 原有数组发生改变
//2. push
    1) 向数组末尾新增一项或多项；
    2) 需要传参
    3) 新数组的length的属性值
    4) 原有数组发生改变
//3. shift
    1) 删除数组的第一项
    2) 不需要传参
    3) 删除的那一项
    3）原有数组发生改变

// 4.unshift
   1) 新增数组第一项或多项
   2）需要传参
   3）新数组的length
   4）原有数组发生改变；

// 5.slice
   1) 从索引m开始，截取到索引n,但是不包括n这一项；
   2) 需要参数
       1> slice(m,n)  m<n 从索引m开始，截取到索引n,但是不包括n这一项；
           m>n>0   得到一个空数组
           m>n  支持负数，length+负数
       2> slice(m) 从索引m开始，截取数组的末尾最后一项
       3> slice() ： 相当于克隆一份一模一样的数组;
   3) 返回截取后的数组
   4) 原有数组不发生改变；

// 6. splice ： 删除、替换、新增
   1) 从索引m开始，删除n项
   2) 需要参数
       splice(m,n)
       splice(m) : 从m开始，删除到数组的末尾
       splice(): 得到一个空数组，原数组不变
   3) 删除的几项组成的新数组
   4) 原有数组发生改变;

// 7. indexOf 
    1) 检测数组成员在数组中第一次出现的索引位置；如果不存在，那么返回-1;
    2) 需要参数
    3) 返回当前成员在数组中第一次出现的索引
    4) 原有数组不发生改变

// 8. lastIndexOf 
    1) 检测数组成员在数组中最后一次出现的索引位置；如果不存在，那么返回-1;
    2) 需要参数
    3) 返回当前成员在数组中最后一次出现的索引
    4) 原有数组不发生改变
// 9.sort
    1) 对数组进行排序
    2) ary.sort(function(a,b){return a-b}) 从小到大
       ary.sort(function(a,b){return b-a}) 从大到小
    3) 返回排序后的数组
    4) 原数组发生改变
// 10.reverse
    1) 倒序，将原有的数组每一项颠倒过来
    2) 不需要传参
    3) 返回颠倒后的新数组
    4) 原有数组发生改变
// 11.concat
    1) 数组的拼接，可以拼接数组或者数组成员
    2) 需要参数，没有参数就是复制一份
    3) 返回一个连接后的新数组
    4) 原数组不发生改变
// 12. join
    1) 将数组按照特定的连接符连在一起，返回一个字符串
    2) 需要参数
    3) 返回一个连接的字符串
    4) 原数组不发生改变
// 13. forEach
    1) 用于数组循环
    2) 传参 ary.forEach(function(item,index){})
    3) 返回undefined；因为没有return
    4) 原有数组不发生改变
// 14. map 映射
    1) 用于数组循环
    2) 传参 ary.map(function(item,index){})
    3) 返回映射后的数组
    4) 原有数组不发生改变 


   
